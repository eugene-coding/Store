@page
@using Microsoft.Net.Http.Headers;
@using System.Net.Mime;
@using System.Web;
@model IndexModel

<div class="header">
    <div class="float-end">
        <button id="@IndexModel.AddLanguageButtonId" type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#@IndexModel.ModalId">
            <i class="fa-solid fa-plus"></i>
        </button>

        <button class="btn btn-danger" type="submit" form="languages">
            <i class="fa-solid fa-trash-can"></i>
        </button>
    </div>

    <h1>@Model.SharedLocalizer["Heading title"]</h1>

    <partial name="_Breadcrumbs" for="Breadcrumbs" />
</div>

<div class="card">
    <div class="card-header"></div>
    <div class="card-body">
        <form id="languages" class="table-responsive" method="post">
            <table class="table table-hover align-middle">
                <thead>
                    <tr>
                        <th scope="col">
                            <input id="@IndexModel.MainCheckboxId" class="form-check-input" type="checkbox" />
                        </th>

                        <th scope="col">
                            <a asp-route-sort="@nameof(LanguageView.Name)">@Html.DisplayNameForInnerType((LanguageView l) => l.Name)</a>
                        </th>

                        <th scope="col">
                            <a asp-route-sort="@nameof(LanguageView.Code)">@Html.DisplayNameForInnerType((LanguageView l) => l.Code)</a>
                        </th>

                        <th scope="col">
                            <a asp-route-sort="@nameof(LanguageView.SortOrder)">@Html.DisplayNameForInnerType((LanguageView l) => l.SortOrder)</a>
                        </th>

                        <th scope="col">
                            <a asp-route-sort="@nameof(LanguageView.Enabled)">@Html.DisplayNameForInnerType((LanguageView l) => l.Enabled)</a>
                        </th>

                        <th scope="col">@Model.SharedLocalizer["Action"]</th>
                    </tr>
                </thead>

                <tbody id="list">
                    <tr>
                        <td scope="row" colspan="6" class="text-center">
                            <i class="fa-solid fa-spinner fa-spin fa-2xl m-3"></i>
                        </td>
                    </tr>
                </tbody>
            </table>
        </form>
    </div>
</div>


<div class="modal fade" id="@IndexModel.ModalId" tabindex="-1" aria-labelledby="createTitle" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="@IndexModel.ModalTitleId" class="modal-title"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@Model.CommonLocalizer["Close"]"></button>
            </div>
            <div id="@IndexModel.ModalContentId" class="modal-body text-center">
                <i class="fa-solid fa-spinner fa-spin fa-2xl m-5"></i>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Model.CommonLocalizer["Close"]</button>
                <button type="submit" form="@IndexModel.FormId" class="btn btn-primary">@Model.CommonLocalizer["Save"]</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/popper.js/umd/popper.min.js" asp-append-version="true"></script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        function getList() {
            fetch(location.href + "?handler=List")
                .then(response => response.text())
                .then(data => {
                    document.getElementById("list").innerHTML = data
                })
        }

        getList();

        const mainCheckbox = document.getElementById("@IndexModel.MainCheckboxId");
        const checkboxes = document.getElementsByName("@IndexModel.CheckboxName");

        mainCheckbox.addEventListener("change", () => {
            checkboxes.forEach(checkbox => {
                checkbox.checked = mainCheckbox.checked;
            });
        });






        document.getElementById("@IndexModel.AddLanguageButtonId").addEventListener("click", event => {
            fetch(location.href + "?handler=AddForm")
                .then(response => response.text())
                .then(data => {
                    document.getElementById("@IndexModel.ModalTitleId").innerHTML = "@(Model.Localizer["Add"])";
                    document.getElementById("@IndexModel.ModalContentId").innerHTML = data

                    document.getElementById("@IndexModel.FormId").addEventListener("submit", event => {
                        event.preventDefault();
                        add();

                        getList();
                    })
                })
        })

        const editButtons = document.getElementsByName("@IndexModel.EditLanguageName");

        editButtons.forEach(editButton => {
            const id = editButton.dataset.id;

            editButton.addEventListener("click", event => {
                fetch(location.href + "?handler=EditForm&id=" + id)
                    .then(response => response.text())
                    .then(data => {
                        document.getElementById("@IndexModel.ModalTitleId").innerHTML = "@(Model.Localizer["Edit"])";
                        document.getElementById("@IndexModel.ModalContentId").innerHTML = data

                        document.getElementById("@IndexModel.FormId").addEventListener("submit", event => {
                            event.preventDefault();
                            edit();

                            getList()
                        });

                        const element = document.getElementById("@IndexModel.ModalId");
                        new bootstrap.Modal(element).show();
                    })
            })
        })
    </script>

    <script>
        function add() {
            fetch(location.href + "?handler=AddLanguage", {
                method: "@HttpMethod.Post.Method",
                headers: {
                    "@HeaderNames.ContentType": "@MediaTypeNames.Application.Json"
                },
                body: createRequestBody()
            })
                .then(response => response.json())
                .then(response => {
                    if (response.ok) {
                        alert("Успешно! Обновите список");
                        return response.text()
                    } else if (response.status === 400) {
                        response.json().then(errors => {
                            alert(errors);
                        });
                    } else {
                        // Form submission encountered other errors
                        // Handle and display appropriate error message
                        alert("Третий блок: " + response.status);
                        response.json().then(errors => {
                            alert(errors);
                        });
                    }
                })
                .catch(error => {
                    // Handle and display any general errors
                });
        }

        function edit() {
            fetch(location.href + "?handler=EditLanguage", {
                method: "@HttpMethod.Post.Method",
                headers: {
                    "@HeaderNames.ContentType": "@MediaTypeNames.Application.Json"
                },
                body: createRequestBody()
            })
                .then(response => response.json())
                .then(response => {
                    if (response.ok) {
                        alert("Успешно! Обновите список");
                        return response.text()
                    } else if (response.status === 400) {
                        response.json().then(errors => {
                            alert(errors);
                        });
                    } else {
                        // Form submission encountered other errors
                        // Handle and display appropriate error message
                        alert("Третий блок: " + response.status);
                        response.json().then(errors => {
                            alert(errors);
                        });
                    }
                })
                .catch(error => {
                    // Handle and display any general errors
                });
        }

        function createRequestBody() {
            const form = document.getElementById("@IndexModel.FormId");
            const formData = new FormData(form);

            const entity = {};

            for (const key of formData.keys()) {
                entity[camelize(key)] = formData.get(key);
            }

            return JSON.stringify(entity)
        }

        function camelize(str) {
            return str.replace(/(?:^\w|[A-Z]|\b\w)/g, function (word, index) {
                return index === 0 ? word.toLowerCase() : word.toUpperCase();
            }).replace(/\s+/g, '');
        }
    </script>
}
