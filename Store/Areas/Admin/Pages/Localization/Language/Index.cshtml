@page
@using Humanizer
@using System.Net.Mime;
@using Microsoft.Net.Http.Headers;
@model IndexModel

<div class="header">
    <div class="float-end">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#create">
            <i class="fa-solid fa-plus"></i>
        </button>

        <button class="btn btn-danger" type="submit" form="languages">
            <i class="fa-solid fa-trash-can"></i>
        </button>
    </div>

    <h1>@Model.SharedLocalizer["Heading title"]</h1>

    <partial name="_Breadcrumbs" for="Breadcrumbs" />
</div>

<div class="card">
    <div class="card-header"></div>
    <div class="card-body">
        <form id="languages" class="table-responsive" method="post">
            <table class="table table-hover align-middle">
                <thead>
                    <tr>
                        <th scope="col">
                            <input id="select" class="form-check-input" type="checkbox" />
                        </th>

                        <th scope="col">
                            <a asp-route-sort="@nameof(LanguageView.Name)">@Html.DisplayNameForInnerType((LanguageView l) => l.Name)</a>
                        </th>

                        <th scope="col">
                            <a asp-route-sort="@nameof(LanguageView.Code)">@Html.DisplayNameForInnerType((LanguageView l) => l.Code)</a>
                        </th>

                        <th scope="col">
                            <a asp-route-sort="@nameof(LanguageView.SortOrder)">@Html.DisplayNameForInnerType((LanguageView l) => l.SortOrder)</a>
                        </th>

                        <th scope="col">
                            <a asp-route-sort="@nameof(LanguageView.Enabled)">@Html.DisplayNameForInnerType((LanguageView l) => l.Enabled)</a>
                        </th>

                        <th scope="col">@Model.SharedLocalizer["Action"]</th>
                    </tr>
                </thead>

                <tbody>
                    @if (Model.Languages.Count > 0)
                    {
                        @foreach (var language in Model.Languages)
                        {
                            <tr>
                                <th scope="row">
                                    <input class="form-check-input" type="checkbox" name="selected" value="@language.Id" />
                                </th>

                                <td>@language.Name</td>
                                <td>@language.Code</td>
                                <td>@language.SortOrder</td>
                                <td>@language.Enabled</td>

                                <td>
                                    <button type="button" class="btn btn-primary" onclick="openModal(@language.Id)">
                                        <i class="fa-solid fa-pencil"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td scope="row" colspan="6" class="text-center">@Model.Localizer["No result"]</td>
                        </tr>
                    }
                </tbody>
            </table>
        </form>
    </div>
</div>


<div class="modal fade" id="@IndexModel.ModalId" tabindex="-1" aria-labelledby="createTitle" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createTitle">@Model.Localizer["Add"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@Model.CommonLocalizer["Close"]"></button>
            </div>
            <div id="@IndexModel.ModalContentId" class="modal-body">
                <partial name="_Form" for="Language" />
            </div>
            <div class="modal-footer">
                <button onclick="update()">Обновить</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Model.CommonLocalizer["Close"]</button>
                <button type="submit" form="language" class="btn btn-primary">@Model.CommonLocalizer["Save"]</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/popper.js/umd/popper.min.js" asp-append-version="true"></script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var mainCheckbox = document.getElementById("select");
            var subCheckboxes = document.getElementsByName("selected");

            mainCheckbox.addEventListener('change', function () {
                for (var i = 0; i < subCheckboxes.length; i++) {
                    subCheckboxes[i].checked = mainCheckbox.checked;
                }
            });
        });
    </script>

    <script>
        function openModal(id) {
            fetch(location.href + "?handler=GetLanguage&id=" + id)
                .then(response => response.text())
                .then(data => document.getElementById("@IndexModel.ModalContentId").innerHTML = data)
                .then(() => {
                    const element = document.getElementById("@IndexModel.ModalId");
                    new bootstrap.Modal(element).show();
                })
        }

        // When we load the modal form dynamically, the prefix is missing
        function update() {
            const entity = {
        @nameof(Model.Language.Id).Camelize(): document.getElementById("@(nameof(Model.Language.Id))").value,
        @nameof(Model.Language.Name).Camelize(): document.getElementById("@(nameof(Model.Language.Name))").value,
        @nameof(Model.Language.Code).Camelize(): document.getElementById("@(nameof(Model.Language.Code))").value,
        @nameof(Model.Language.SortOrder).Camelize(): document.getElementById("@(nameof(Model.Language.SortOrder))").value,
        @nameof(Model.Language.Enabled).Camelize(): document.getElementById("@(nameof(Model.Language.Enabled))").checked,
                    };

        fetch(location.href + "?handler=UpdateLanguage", {  // Replace 'Index' with your Razor Page name
            method: "@HttpMethod.Post.Method",
            headers: {
                "@HeaderNames.ContentType": "@MediaTypeNames.Application.Json"
            },
            body: JSON.stringify(entity)
        })
            .then(response => response.text())
            .then(data => {
                alert(data);
            })
            .catch(error => {
                alert(error);
            });
                                                                        }
    </script>
}
